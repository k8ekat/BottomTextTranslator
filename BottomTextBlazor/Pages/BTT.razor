@page "/btt"
@using System.Text
@using BottomTextTranslator
@inject HttpClient Http

<h3>BTT</h3>
<EditForm Model="MessageInput">
    <label id="toplabel">Text to Encode into Bottom</label>
    <InputTextArea class="form-control" @bind-Value="@MessageInput"/>
</EditForm>
<EditForm Model="KeyTypes">
    <InputSelect  class="form-select" @bind-Value="@SelectedKeyType">
        @foreach(var keytype in KeyTypes)
        {
            <option value="@keytype">@keytype</option>
        }
    </InputSelect>
    </EditForm>
<button class="btn btn-primary" @onclick="InputSwap">Swap Input</button>
<button class="btn btn-primary" @onclick="SubmitBTTFuncReq">Translate</button>
<label id="bottomlabel">Text Encoded in BottomText</label>
<EditForm Model="MessageOutput">
    <InputTextArea class="form-control" @bind-Value="@MessageOutput"  @oninput="()=> SubmitBTTFuncReq()"/>
</EditForm>
    


@code {
    public string MessageInput = "input area";
    public string MessageOutput = "output area";
    public string SelectedKeyType = "QWERTY";

    //private string UriBase   = "https://bottomtexttranslator.azurewebsites.net/api/";
    //private string UriEncode = $"{BTT.UriBase}Encode?code={String.Empty}";
    //private string UriDecode = $"{BTT.UriBase}Decode?code={String.Empty}";

    private Boolean Encode = true; //encode = true, decode = false

    private List<String> KeyTypes = BottomText.GetSupportedKeyboardLayouts().ToList();

    private void InputSwap()
    {
        Encode = !Encode;
        MessageInput = MessageOutput;
        MessageOutput = string.Empty;
    }

    private void SubmitBTTFuncReq()
    {
        if(String.IsNullOrEmpty(MessageInput))
        {
            return;
        }


        //string FullUri = (Encode ? UriEncode : UriDecode) +
        //                $"&message={Convert.ToBase64String(Encoding.UTF8.GetBytes(teststring))}" +
        //                $"&keytype={keytype}"
        //                ;
        //var rsp = await Http.GetAsync(FullUri);
        //rsp.EnsureSuccessStatusCode();
        //var rslt = await rsp.Content.ReadAsStringAsync();
        //MessageOutput = rslt;

        
        MessageOutput = Encode ? BottomText.Encode(MessageInput, SelectedKeyType) : BottomText.Decode(MessageInput, SelectedKeyType);

        StateHasChanged();
    }

    
}


